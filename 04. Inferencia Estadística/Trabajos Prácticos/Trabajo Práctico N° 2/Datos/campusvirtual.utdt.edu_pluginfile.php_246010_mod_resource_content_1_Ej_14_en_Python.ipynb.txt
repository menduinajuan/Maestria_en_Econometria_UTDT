{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Ej.14 en Python.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## Estimación por Máxima Verosimilitud del parámetro de localización de una distribución de Cauchy\n",
        "\n",
        "$f(x;θ)=\\frac{1}{\\pi}\\frac{1}{1+(x-θ)^2} $"
      ],
      "metadata": {
        "id": "27WCsX7Ixvvw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy import stats"
      ],
      "metadata": {
        "id": "TfG5M5R50Tqx"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.seed(42)"
      ],
      "metadata": {
        "id": "-lVHlyMr4M8D"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "Wn0hKjckxqri"
      },
      "outputs": [],
      "source": [
        "## Función de Score\n",
        "\n",
        "def score(xVec: np.array, theta: float) -> float:\n",
        "  num = 2*(xVec - theta)\n",
        "  den = 1 + (xVec - theta)**2\n",
        "  score_ind = num / den\n",
        "  return score_ind.sum()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Función Hessiana\n",
        "\n",
        "def hessian(xVec: np.array, theta: float) -> float:\n",
        "  num = 2 * ((xVec - theta)**2 -1)\n",
        "  den = (1 + (xVec - theta)**2)**2\n",
        "  hessian_ind = num / den\n",
        "  return hessian_ind.sum()"
      ],
      "metadata": {
        "id": "Cm2SVUqQ0uio"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## Newton-Raphson Algorithm\n",
        "\n",
        "def NR(f, derivative, xVec, theta_0, epsilon, n_iter = 1000):\n",
        "  xn = theta_0\n",
        "  for i in range(0, n_iter):\n",
        "    fxn = f(xVec, xn)\n",
        "    if abs(fxn) < epsilon:\n",
        "      print('Found solution after',i,'iterations.')\n",
        "      return xn\n",
        "    derivative_f = derivative(xVec, xn)\n",
        "    if derivative_f == 0:\n",
        "      print('Zero derivative. No solution found.')\n",
        "      return None\n",
        "    xn = xn - fxn/derivative_f\n",
        "  print('Exceeded maximum iterations. No solution found.')\n",
        "  return None"
      ],
      "metadata": {
        "id": "x_nt9CgH1wRV"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### Tamaño de Muestras\n",
        "\n",
        "n1 = 10\n",
        "n2 = 100\n",
        "n3 = 1000\n",
        "\n",
        "### Muestras\n",
        "\n",
        "sample_1 = stats.cauchy.rvs(loc = 1, scale = 1, size = n1)\n",
        "sample_2 = stats.cauchy.rvs(loc = 1, scale = 1, size = n2)\n",
        "sample_3 = stats.cauchy.rvs(loc = 1, scale = 1, size = n3)"
      ],
      "metadata": {
        "id": "UwX--RTD26Fm"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## Plotting Score\n",
        "\n",
        "grid = np.linspace(-10,10, 1000)"
      ],
      "metadata": {
        "id": "x8TQJsEY4dOJ"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#plt.plot(grid, [score(sample_1,x) for x in grid], label = 'sample_1')\n",
        "plt.plot(grid, [score(sample_2,x) for x in grid], label = 'sample_2')\n",
        "#plt.plot(grid, [score(sample_3,x) for x in grid], label = 'sample_3')\n",
        "plt.grid(lw=0.5)\n",
        "plt.legend()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "faXYP_x35glr",
        "outputId": "78cd5e02-9c28-4cda-cf19-06e5ea9f4d0c"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f5f0d191850>"
            ]
          },
          "metadata": {},
          "execution_count": 54
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## MLE manualmente con NR"
      ],
      "metadata": {
        "id": "MppmlLlH31ot"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "NR(score, hessian, sample_1, 0, 0.00001)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vY4vvxJD9b7O",
        "outputId": "04d20b34-0fdb-4ea6-fd51-7e23c323d4b6"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found solution after 2 iterations.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.011874928095254662"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "NR(score, hessian, sample_2, 0, 0.00001)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "08fzQF0I9cU0",
        "outputId": "3b522c44-ce86-438b-bfc9-8b37327286b6"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found solution after 6 iterations.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.128277358550618"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "NR(score, hessian, sample_3, 0, 0.00001)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JHVub7Iy32xL",
        "outputId": "d339ae2e-72a3-49ef-fed4-92925d7b1ada"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found solution after 4 iterations.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9708723136885714"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## MLE usando la librería scipy"
      ],
      "metadata": {
        "id": "tuvjwbrf-j_A"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.optimize import fsolve \n",
        "fsolve(score, theta, args=(sample_1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E4Yg5POk7OmB",
        "outputId": "e62649de-f684-4d2e-ab5b-157cd0cfa90e"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.01187493])"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fsolve(score, theta, args=(sample_2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ira9nOHi92sK",
        "outputId": "5c2c4c07-5b8f-4803-db4c-3a921f6f5207"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1.12827736])"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fsolve(score, theta, args=(sample_3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BUkCo1So97yb",
        "outputId": "2ff0dada-ab5a-47f1-e31a-8bf52d0a68f1"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.97087231])"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "B4LdKLjw-BAH"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}