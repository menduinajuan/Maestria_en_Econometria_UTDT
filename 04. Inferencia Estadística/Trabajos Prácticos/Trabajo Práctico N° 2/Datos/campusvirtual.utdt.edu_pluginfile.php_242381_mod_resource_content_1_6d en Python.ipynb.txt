{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.optimize import fsolve, minimize_scalar"
      ],
      "metadata": {
        "id": "WcN5btf5YeD3"
      },
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "i9f7WxFlWmix"
      },
      "outputs": [],
      "source": [
        "sample = [-0.5, -0.1, -0.2, 0.6]"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#sample = np.random.uniform(-1,1,100000)"
      ],
      "metadata": {
        "id": "7tUHUV0JWw0B"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sample"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "xshizIsBZLp5",
        "outputId": "0a39e660-2b5a-4b4f-ba7a-6bba1e8c8677"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[-0.5, -0.1, -0.2, 0.6]"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def score(xVec, theta):\n",
        "  result = 0\n",
        "  for x in xVec:\n",
        "    result += (x / (1 + theta*x))\n",
        "  return result"
      ],
      "metadata": {
        "id": "E2u35DQsW0CU"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%time score(sample, 0.3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "wpQpBA7dXTTE",
        "outputId": "f9048a94-b83d-4169-fb8d-0d85f379e7f0"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 5 µs, sys: 2 µs, total: 7 µs\n",
            "Wall time: 9.54 µs\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-0.39561945879842386"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def score_vec(xVec, theta):\n",
        "    xVec = np.array(xVec)\n",
        "    result = (xVec / (1 + xVec*theta))\n",
        "    return result.sum()"
      ],
      "metadata": {
        "id": "T5KyCgtbXVoi"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%time score_vec(sample, 0.3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "vM9HKGeYX8oL",
        "outputId": "36198530-c2c1-47f5-834e-3a01c9174271"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 123 µs, sys: 25 µs, total: 148 µs\n",
            "Wall time: 154 µs\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-0.39561945879842386"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### Plot"
      ],
      "metadata": {
        "id": "_aA6lKHffVMK"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "grid = np.linspace(-1 , 1, 100)"
      ],
      "metadata": {
        "id": "jMYNTBujfZeF"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(grid, score(sample, grid))\n",
        "plt.grid(lw=0.5)\n",
        "plt.axhline(0, ls='--', c='r')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "id": "5AcsbBH3fpVJ",
        "outputId": "22e8e3a2-3dba-4f2a-e060-9fb19b865a71"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.lines.Line2D at 0x7fbe86a36910>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### Newton-Raphson"
      ],
      "metadata": {
        "id": "ROUGHixOYvBq"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def derivative(xVec, theta):\n",
        "  xVec = np.array(xVec)\n",
        "  results = - (xVec)**2 / (1 + theta*xVec)**2\n",
        "  return results.sum()"
      ],
      "metadata": {
        "id": "9_Mb1gDbfEPb"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def NR(f, derivative, xVec, theta_0, epsilon, n_iter = 1000):\n",
        "  xn = theta_0\n",
        "  for i in range(0, n_iter):\n",
        "    fxn = f(xVec, xn)\n",
        "    if abs(fxn) < epsilon:\n",
        "      print('Found solution after',i,'iterations.')\n",
        "      return xn\n",
        "    derivative_f = derivative(xVec, xn)\n",
        "    if derivative_f == 0:\n",
        "      print('Zero derivative. No solution found.')\n",
        "      return None\n",
        "    xn = xn - fxn/derivative_f\n",
        "  print('Exceeded maximum iterations. No solution found.')\n",
        "  return None\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "YQT45cv_kuMv"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "NR(score, derivative, sample, theta_0 = -0.999, epsilon = 0.00000000001, n_iter=10000)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "S0jo_94U0n5V",
        "outputId": "069e3318-2d98-40d0-c498-d1c5754ef5a6"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "loop\n",
            "loop\n",
            "loop\n",
            "loop\n",
            "loop\n",
            "loop\n",
            "Found solution after 5 iterations.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-0.28541660212359016"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "UEMw0J2O4XEU"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}